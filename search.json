[{"title":"关于this、call、apply和bind","url":"http://yoursite.com/2019/06/25/关于this、call、apply和bind/","content":"<h1 id=\"1-this\"><a href=\"#1-this\" class=\"headerlink\" title=\"1.this\"></a>1.this</h1><h2 id=\"1-1-this-到底是什么？\"><a href=\"#1-1-this-到底是什么？\" class=\"headerlink\" title=\"1.1 this 到底是什么？\"></a>1.1 this 到底是什么？</h2><p>this 就是 call 方法传递的 第一个参数，接下来给出转换公式：<br><code>fn(x) &lt;=&gt; fn.call( undefined , x)</code><br>在 严格模式(‘use strict’) 下this 就是的 undefined，非严格模式下，浏览器会默认把undefined 变成 window<br><code>a.b.c. fn(x) &lt;=&gt; a.b.c. fn.call(a.b.c, x)</code><br>this 就是 a.b.c1.2 this 题目分析1.2.1 严格模式与非严格模式下的 this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f1 = function ()&#123;</span><br><span class=\"line\">    &apos;use strict&apos; // 使用严格模式</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1() // undefined，不是对象; f1()等价于f1.call(undefinded)</span><br><span class=\"line\">f1.call(null) // null，不是对象</span><br><span class=\"line\">f1.call(5201314) // 5201314, 不是对象</span><br><span class=\"line\">f1.call(true) // true, 不是对象</span><br><span class=\"line\">f1.call(x) // 报错，x 未定义</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f1 = function ()&#123;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1() // window，对象; f1()等价于f1.call(undefinded)</span><br><span class=\"line\">f1.call(null) // window，对象</span><br><span class=\"line\">f1.call(5201314) // 5201314, number对象</span><br><span class=\"line\">f1.call(true) // true, boolean对象</span><br><span class=\"line\">f1.call(x) // 报错，x 未定义</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-2-青铜段位的this\"><a href=\"#1-2-2-青铜段位的this\" class=\"headerlink\" title=\"1.2.2 青铜段位的this\"></a>1.2.2 青铜段位的this</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">var obj1 = &#123;</span><br><span class=\"line\">a:2,</span><br><span class=\"line\">fn:function()&#123;</span><br><span class=\"line\">console.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.fn() //2 obj1.fn.call(obj1)，this就是obj1</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-3-白银段位的this\"><a href=\"#1-2-3-白银段位的this\" class=\"headerlink\" title=\"1.2.3 白银段位的this\"></a>1.2.3 白银段位的this</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">foo: function()&#123;</span><br><span class=\"line\">console.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = obj.foo</span><br><span class=\"line\">obj.foo() // 转换为 obj.foo.call(obj)，this 就是 obj</span><br><span class=\"line\">bar() // bar.call() =&gt; bar.call(undefined), 结果是 window 对象</span><br><span class=\"line\"></span><br><span class=\"line\">function fn2()&#123;&#125;</span><br><span class=\"line\">function fn ()&#123; console.log(this) &#125;</span><br><span class=\"line\">var arr = [fn, fn2]</span><br><span class=\"line\">arr[0]() // [ƒ, ƒ], this 就是 arr, 相当于arr.0.call(arr)</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-4-黄金段位的this\"><a href=\"#1-2-4-黄金段位的this\" class=\"headerlink\" title=\"1.2.4 黄金段位的this\"></a>1.2.4 黄金段位的this</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.onclick = function f1()&#123;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125; // 看文档，搜索 MDN onclick，文档说给处理器的 this 是触发事件的元素，这里是button</span><br><span class=\"line\"></span><br><span class=\"line\">button.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;) // 看文档，搜索 MDN addEventListener，this是该元素的引用，这里是button</span><br><span class=\"line\"></span><br><span class=\"line\">$(&apos;ul&apos;).on(&apos;click&apos;, &apos;li&apos;, function()&#123;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;) // 看文档，搜索jQuery on，当jQuery的调用处理程序时,</span><br><span class=\"line\">//this关键字指向的是当前正在执行事件的元素,这里就是 &apos;li&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-5-铂金段位的this\"><a href=\"#1-2-5-铂金段位的this\" class=\"headerlink\" title=\"1.2.5 铂金段位的this\"></a>1.2.5 铂金段位的this</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.onclick = function()&#123;</span><br><span class=\"line\">　　function fn()&#123;</span><br><span class=\"line\">　　　　console.log(this); // 竟然是 window, 蛋疼</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　fn(); // 其实就是这个函数的执行，等价于 fn.call(undefined)，this 就是undefined</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">button.onclick = function()&#123;</span><br><span class=\"line\">　　var _this = this; // this 是 button</span><br><span class=\"line\">　　function fn()&#123;</span><br><span class=\"line\">　　　　console.log(_this); // _this 是botton ，将失去的 this 找回了</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　fn();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>// 也可以用下面的写法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.onclick = function()&#123;</span><br><span class=\"line\">　　var fn = function()&#123;</span><br><span class=\"line\">　　　　console.log(this); //call 传递的this 值</span><br><span class=\"line\">　　&#125;.call(this); // button</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj=&#123;&#125;</span><br><span class=\"line\">obj.fn=function()&#123;</span><br><span class=\"line\">    console.log(this) // obj &#123;fn: function&#125;</span><br><span class=\"line\">    ! function()&#123;</span><br><span class=\"line\">        console.log(this) // window</span><br><span class=\"line\">    &#125;() // 记住一个结论，匿名函数的执行具有全局性，所以传入的是undefined, 所以this是window</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-2-6-钻石段位的this\"><a href=\"#1-2-6-钻石段位的this\" class=\"headerlink\" title=\"1.2.6 钻石段位的this\"></a>1.2.6 钻石段位的this</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj=&#123;</span><br><span class=\"line\">    fn:function()&#123;</span><br><span class=\"line\">        setTimeout(function()&#123;</span><br><span class=\"line\">            console.log(this);</span><br><span class=\"line\">        &#125;，100);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn();//window</span><br><span class=\"line\">// 记住一个结论:</span><br><span class=\"line\">// this出现在全局函数setTimeout()中，在setTimeout的延迟函数(非箭头函数)内，this指向 window</span><br><span class=\"line\"></span><br><span class=\"line\">var obj=&#123;</span><br><span class=\"line\">    fn:function()&#123;</span><br><span class=\"line\">        console.log(this) // obj</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            console.log(this); // 就是外面的 this: obj</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.fn(); // 箭头函数中的 this 就是外面的this，这句话很重要</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-7-最强王者的this\"><a href=\"#1-2-7-最强王者的this\" class=\"headerlink\" title=\"1.2.7 最强王者的this\"></a>1.2.7 最强王者的this</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function X()&#123;</span><br><span class=\"line\">return object = &#123;</span><br><span class=\"line\">name: &apos;object&apos;,</span><br><span class=\"line\">options: null,</span><br><span class=\"line\">f1(x)&#123;</span><br><span class=\"line\">this.options = x // 第2步：这个x是第一步传递的options，this是第一步的call的</span><br><span class=\"line\">this.f2() //第一个参数 x(外面的x),它是由x = X()决定, 就是X()的返回值，object</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">f2()&#123;</span><br><span class=\"line\">this.options.f2.call(this) // 第3步：第一个this 是object, 第二个this 也是object</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">name: &apos;options&apos;,</span><br><span class=\"line\">f1()&#123;&#125;,</span><br><span class=\"line\">f2()&#123;</span><br><span class=\"line\">console.log(this) // 第4步：这个this是第3步传进来的this, object</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var x = X()</span><br><span class=\"line\">x.f1(options) // object，第1步：改写 x.f1.call(x, options)</span><br></pre></td></tr></table></figure>\n<p>再也不想看到this了。。。</p>\n<h1 id=\"2-call、apply-、bind\"><a href=\"#2-call、apply-、bind\" class=\"headerlink\" title=\"2. call、apply 、bind\"></a>2. call、apply 、bind</h1><h2 id=\"2-1-三者异同\"><a href=\"#2-1-三者异同\" class=\"headerlink\" title=\"2.1 三者异同\"></a>2.1 三者异同</h2><p>它们都是用来改变 this 的指向的<br>call()和apply()功能相同，唯一不同的是传参的时候call第二个参数只能传递参数列表，而apply可以是列表也可以是arguments或数组<br>使用call和apply会直接执行这个函数，而bind并不直接执行，而是将绑定好的this重新返回一个新函数，什么时候调用由你自己决定，bind的传参方式和call相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(a, b) &#123;</span><br><span class=\"line\">console.log(this)</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">console.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f() //window, undefined, undefined</span><br><span class=\"line\"></span><br><span class=\"line\">/*call*/</span><br><span class=\"line\">f.call(&apos;a&apos;, 2, 3) //&apos;a&apos;, 2, 3</span><br><span class=\"line\">f.call(&apos;a&apos;, 2) //&apos;a&apos;, 2, undefined</span><br><span class=\"line\">f.call() //window, undefined, undefined</span><br><span class=\"line\"></span><br><span class=\"line\">/*apply*/</span><br><span class=\"line\">f.apply(&apos;a&apos;, [2, 3]) //&apos;a&apos;, 2, 3</span><br><span class=\"line\">f.apply(&apos;a&apos;, [2]) //&apos;a&apos;, 2</span><br><span class=\"line\">f.apply() //window, undefined, undefined</span><br><span class=\"line\"></span><br><span class=\"line\">/*bind*/</span><br><span class=\"line\">nf = f.bind(&apos;a&apos;, 2, 3) //bind方法返回一个新函数</span><br><span class=\"line\">nf() // &apos;a&apos;, 2, 3</span><br><span class=\"line\">nf = f.bind(&apos;a&apos;, 2)</span><br><span class=\"line\">nf() // &apos;a&apos;, 2，undefined</span><br><span class=\"line\">nf = f.bind(&apos;a&apos;)</span><br><span class=\"line\">nf() // &apos;a&apos;, undefined, undefined</span><br><span class=\"line\">nf = f.bind()</span><br><span class=\"line\">nf() // window, undefined, undefined</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-对于箭头函数\"><a href=\"#2-2-对于箭头函数\" class=\"headerlink\" title=\"2.2 对于箭头函数\"></a>2.2 对于箭头函数</h2><p>箭头函数会捕获其所在上下文的 this 值，作为自己的 this 值<br>扩展： 箭头函数和普通函数的区别<br>箭头函数不能使用 new 命令，它作为匿名函数是不能成为构造函数的<br>箭头函数没有 arguments 对象，但是可以用 Rest 参数代替</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fn = (...x)=&gt;&#123; // ...x 即为rest参数</span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1, true, function()&#123;&#125;) // [1, true, ƒ]</span><br></pre></td></tr></table></figure>\n<p>不可以使用 yield 命令, 因此箭头函数不能用作 Generator 函数<br>通过 call() 或 apply() 方法调用时，只是传入了参数而已，对 this并没有什么影响<br>箭头函数没有原型属性</p>\n","categories":[],"tags":[]},{"title":"MVVM发展历程","url":"http://yoursite.com/2019/06/19/MVVM发展历程/","content":"<h1 id=\"1-三层架构\"><a href=\"#1-三层架构\" class=\"headerlink\" title=\"1. 三层架构\"></a>1. 三层架构</h1><p>三层架构就是将整个业务应用划分为：<br>UI层：界面层（User Interface layer）<br>BLL层：业务逻辑层（Business Logic Layer）<br>DAL层：数据访问层（Data access layer）</p>\n<p>区分层次的目的是为了“高内聚低耦合”<br>在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。</p>\n<h1 id=\"2-MVC\"><a href=\"#2-MVC\" class=\"headerlink\" title=\"2.MVC\"></a>2.MVC</h1><p>如下图所示<br><img src=\"1.png\" alt><br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一个关于数据操作，页面展示的 js 文件的mvc的代码组织形式</span><br><span class=\"line\">! function ()&#123;</span><br><span class=\"line\">var view = document.querySelector(&apos;section.message&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var model =&#123;</span><br><span class=\"line\">//初始化数据</span><br><span class=\"line\">init: function()&#123;</span><br><span class=\"line\">var APP_ID = &apos;XXX&apos;;</span><br><span class=\"line\">var APP_KEY = &apos;xxx&apos;;</span><br><span class=\"line\">AV.init(&#123; appId: APP_ID, appKey: APP_KEY &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// 获取数据</span><br><span class=\"line\">fetch: function()&#123;</span><br><span class=\"line\">var query = new AV.Query(&apos;Message&apos;)</span><br><span class=\"line\">return query.find() // Promise 对象</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">// 新建数据</span><br><span class=\"line\">save: function(name, content)&#123;</span><br><span class=\"line\">var Message = AV.Object.extend(&apos;Message&apos;);</span><br><span class=\"line\">var message = new Message();</span><br><span class=\"line\">return message.save(&#123; // Promise 对象</span><br><span class=\"line\">&apos;name&apos;: name ,</span><br><span class=\"line\">&apos;content&apos;: content</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var controller = &#123;</span><br><span class=\"line\">view: null,</span><br><span class=\"line\">model: null,</span><br><span class=\"line\">messageList: null,</span><br><span class=\"line\">init: function(view,model)&#123;</span><br><span class=\"line\">this.view = view</span><br><span class=\"line\">this.model = model</span><br><span class=\"line\"></span><br><span class=\"line\">this.messageList = view.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">this.form = myForm = view.querySelector(&apos;form&apos;)</span><br><span class=\"line\">this.model.init()</span><br><span class=\"line\">this.loadMessages()</span><br><span class=\"line\">this.bindEvents()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">loadMessages: function()&#123;</span><br><span class=\"line\">this.model.fetch().then( (messages) =&gt; &#123;</span><br><span class=\"line\">let array = messages.map((item) =&gt; item.attributes)</span><br><span class=\"line\">array.forEach((item) =&gt; &#123;</span><br><span class=\"line\">let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">li.innerText = `$&#123;item.name&#125;: $&#123;item.content&#125;`</span><br><span class=\"line\">let messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">messageList.appendChild(li)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;, function (error) &#123;</span><br><span class=\"line\">console.log(&apos;提交失败, 请改天再留言&apos;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">bindEvents: function()&#123;</span><br><span class=\"line\">this.form.addEventListener(&apos;submit&apos;, function (e)&#123;</span><br><span class=\"line\">e.preventDefault()</span><br><span class=\"line\">this.saveMessage()</span><br><span class=\"line\">&#125;.bind(this)) // 用bind将this绑定到 funtion 里面</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">saveMessage: function()&#123;</span><br><span class=\"line\">let myForm = this.form</span><br><span class=\"line\">let content = myForm.querySelector(&apos;input[name=content]&apos;).value</span><br><span class=\"line\">let name = myForm.querySelector(&apos;input[name=name]&apos;).value</span><br><span class=\"line\">this.model.save(name, content).then(function(object) &#123;</span><br><span class=\"line\">let li = document.createElement(&apos;li&apos;)</span><br><span class=\"line\">if(object.attributes.name !== &apos;&apos; &amp;&amp; object.attributes.content !== &apos;&apos;) &#123;</span><br><span class=\"line\">li.innerText = `$&#123;object.attributes.name&#125;: $&#123;object.attributes.content&#125;`</span><br><span class=\"line\">let messageList = document.querySelector(&apos;#messageList&apos;)</span><br><span class=\"line\">messageList.appendChild(li)</span><br><span class=\"line\">myForm.querySelector(&apos;input[name=content]&apos;).value = &apos;&apos;</span><br><span class=\"line\">myForm.querySelector(&apos;input[name=name]&apos;).value = &apos;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">controller.init(view, model)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;.call()</span><br></pre></td></tr></table></figure></p>\n<p>缺点：<br>视图与控制器间的过于紧密的连接，不利于View的组件化，即可复用性低<br>视图对模型数据的低效率访问<br>没有UI环境，Controller的单元测试变得困难</p>\n<h1 id=\"3-MVP（MVC-的改良）\"><a href=\"#3-MVP（MVC-的改良）\" class=\"headerlink\" title=\"3. MVP（MVC 的改良）\"></a>3. MVP（MVC 的改良）</h1><p>MVP与MVC最大的区别就用Presenter将Model和View隔开了，不允许其互相直接通信，所有的消息都是通过Presenter这个中间人来传递。<br>如下图所示：<br><img src=\"2.png\" alt></p>\n<p>缺点：<br>View层和Presenter层是通过接口连接，在复杂的界面中，维护过多接口的成本很大<br>View和Presenter层的交互会过于频繁，二者联系太过紧密</p>\n<h1 id=\"4-MVVM（MVP-的改良）\"><a href=\"#4-MVVM（MVP-的改良）\" class=\"headerlink\" title=\"4. MVVM（MVP 的改良）\"></a>4. MVVM（MVP 的改良）</h1><p>MVVM代表的是Model-View-ViewModel，将MVP中的P换成VM（视图模型），它的依赖关系和MVP是一样的<br>MVVM把View和Model的同步逻辑通过binder自动化了。MVP的Presenter负责的View和Model同步不再需要手动操作，而是交由框架所提供的Binder进行负责<br>Vue.js就是MVVM框架的一种典型实现，它的核心思想为数据驱动和组件化<br>缺点：<br>数据绑定使得 Bug 很难被调试</p>\n","categories":["MVVM"],"tags":["MVVM"]},{"title":"ajax","url":"http://yoursite.com/2019/06/03/ajax/","content":"<h1 id=\"ajax如何发请求？\"><a href=\"#ajax如何发请求？\" class=\"headerlink\" title=\"ajax如何发请求？\"></a>ajax如何发请求？</h1><p>用 form 可以发请求，但是会刷新页面或新开页面<br>用 a 可以发 get 请求，但是也会刷新页面或新开页面<br>用 img 可以发 get 请求，但是只能以图片的形式展示<br>用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示<br>用 script 可以发 get 请求，但是只能以脚本的形式运行<br>有没有什么方式可以实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get、post、put、delete 请求都行</span><br><span class=\"line\">想以什么形式展示就以什么形式展示</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"微软的突破\"><a href=\"#微软的突破\" class=\"headerlink\" title=\"微软的突破\"></a>微软的突破</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`IE 5` 率先在 JS 中引入 `ActiveX `对象（`API`），使得 `JS `可以直接发起 `HTTP` 请求。</span><br><span class=\"line\">随后 `Mozilla`、 `Safari`、 `Opera` 也跟进（抄袭）了，取名 `XMLHttpRequest`，并被纳入 `W3C` 规范</span><br></pre></td></tr></table></figure>\n<h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><p><code>Jesse James Garrett</code>將如下技术取名叫做 <code>AJAX</code>：异步的 <code>JavaScript</code>和<code>XML</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 XMLHttpRequest 发请求</span><br><span class=\"line\">服务器返回 XML 格式的字符串</span><br><span class=\"line\">JS 解析 XML，并更新局部页面</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何使用-XMLHttpRequest\"><a href=\"#如何使用-XMLHttpRequest\" class=\"headerlink\" title=\"如何使用 XMLHttpRequest\"></a>如何使用 XMLHttpRequest</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myButton.addEventListener(&apos;click&apos;, (e)=&gt;&#123;</span><br><span class=\"line\">let request = new XMLHttpRequest()</span><br><span class=\"line\">request.open(&apos;get&apos;, &apos;/xxx&apos;) // 配置request</span><br><span class=\"line\">request.send()</span><br><span class=\"line\">request.onreadystatechange = ()=&gt;&#123;</span><br><span class=\"line\">if(request.readyState === 4)&#123;</span><br><span class=\"line\">console.log(&apos;请求响应都完毕了&apos;)</span><br><span class=\"line\">console.log(request.status)</span><br><span class=\"line\">if(request.status &gt;= 200 &amp;&amp; request.status &lt; 300)&#123;</span><br><span class=\"line\">console.log(&apos;说明请求成功&apos;)</span><br><span class=\"line\">console.log(typeof request.responseText)</span><br><span class=\"line\">console.log(request.responseText)</span><br><span class=\"line\">let string = request.responseText</span><br><span class=\"line\">// 把符合 JSON 语法的字符串</span><br><span class=\"line\">// 转换成 JS 对应的值</span><br><span class=\"line\">let object = window.JSON.parse(string)</span><br><span class=\"line\">// JSON.parse 是浏览器提供的</span><br><span class=\"line\">console.log(typeof object)</span><br><span class=\"line\">console.log(object)</span><br><span class=\"line\">console.log(&apos;object.note&apos;)</span><br><span class=\"line\">console.log(object.note)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;else if(request.status &gt;= 400)&#123;</span><br><span class=\"line\">console.log(&apos;说明请求失败&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 后端代码</span><br><span class=\"line\">&#125;else if(path===&apos;/xxx&apos;)&#123;</span><br><span class=\"line\">response.statusCode = 200</span><br><span class=\"line\">response.setHeader(&apos;Content-Type&apos;, &apos;text/json;charset=utf-8&apos;)</span><br><span class=\"line\">response.setHeader(&apos;Access-Control-Allow-Origin&apos;, &apos;http://frank.com:8001&apos;)</span><br><span class=\"line\">response.write(`</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;note&quot;:&#123;</span><br><span class=\"line\">&quot;to&quot;: &quot;小谷&quot;,</span><br><span class=\"line\">&quot;from&quot;: &quot;方方&quot;,</span><br><span class=\"line\">&quot;heading&quot;: &quot;打招呼&quot;,</span><br><span class=\"line\">&quot;content&quot;: &quot;hi&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`)</span><br><span class=\"line\">response.end()</span><br></pre></td></tr></table></figure>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>只有 协议+端口+域名 一模一样才允许发 AJAX 请求<br>一模一样一模一样一模一样一模一样一模一样一模一样一模一样一模一样<br>浏览器必须保证<br>只有 协议+端口+域名 一模一样才允许发 AJAX 请求<br>CORS 可以告诉浏览器，我俩一家的，别阻止他<br>突破同源策略 === 跨域<br>Cross-Origin Resource Sharing<br>C O源 R SCORS 跨域</p>\n","categories":["ajax"],"tags":["ajax"]},{"title":"環境搭建","url":"http://yoursite.com/2019/06/02/環境搭建/","content":"<h1 id=\"初始配置\"><a href=\"#初始配置\" class=\"headerlink\" title=\"初始配置\"></a>初始配置</h1><p>请现在立刻在 <code>Git Bash</code>命令行运行这五句话！！！一定要运行这五句话，不然 <code>git</code>就不能用了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. git config --global user.name xxxxxx (把 xxxxxx 替换成你的英文名字随便什么都行)</span><br><span class=\"line\">2. git config --global user.email yyyyyy (把 yyyyyy 替换成你的邮箱跟 github 一致或者不一致也行)</span><br><span class=\"line\">3. git config --global push.default simple</span><br><span class=\"line\">4. git config --global core.quotepath false</span><br><span class=\"line\">5. git config --global core.editor &quot;vim&quot; (使用 vim 编辑提交信息）</span><br><span class=\"line\">6. npm config set registry https://registry.npm.taobao.org/</span><br><span class=\"line\">7. npm config set loglevel http</span><br><span class=\"line\">8. npm config set progress false</span><br></pre></td></tr></table></figure>\n<p><code>npm</code>的配置被存储在<code>~/.npmrc</code>，你可以随时改。</p>\n<h2 id=\"使用-j-快速跳转\"><a href=\"#使用-j-快速跳转\" class=\"headerlink\" title=\"使用 j 快速跳转\"></a>使用 j 快速跳转</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  mkdir ~/repos</span><br><span class=\"line\">2.  cd ~/repos</span><br><span class=\"line\">3.  git clone https://github.com/rupa/z.git</span><br><span class=\"line\">4.  touch ~/.bashrc</span><br><span class=\"line\">5.  start ~/.bashrc 在文件里写入. ~/repos/z/z.shalias j=&apos;z&apos;</span><br><span class=\"line\">6.  重启 Git Bash</span><br><span class=\"line\">7.  你去过的所有目录都会被记录了！使用 j XXX 就可以快速到达之前去过的目录了！</span><br><span class=\"line\">8.  使用 j 可以查看所有去过的目录</span><br></pre></td></tr></table></figure>\n<p>注意，<code>~/repos/z/z.sh</code>不能删除，删除了就不能用了。</p>\n<h2 id=\"配置github公鑰\"><a href=\"#配置github公鑰\" class=\"headerlink\" title=\"配置github公鑰\"></a>配置github公鑰</h2><p>1.先设置<code>GitHub</code>的<code>user name</code>和<code>email</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Git账号&quot; git config --global user.email &quot;Git邮箱&quot;</span><br></pre></td></tr></table></figure></p>\n<p>2.生成一个新的<code>SSH</code>密钥<br>打开 <code>Git Bash</code>，输入如下命令，然后连续按三个回车即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>注：生成的SSH私钥路径 <code>/c/Users/chenjs/.ssh/id_rsa</code> 后面要用到。<br>3.将<code>SSH</code>私钥添加到 <code>ssh-agent</code></p>\n<p>配置 <code>ssh-agent</code>程序使用<code>SSH key</code></p>\n<p>.在后台启动 <code>ssh-agent</code><br><code>eval $(ssh-agent -s)</code></p>\n<p>.将SSH私钥添加到 <code>ssh-agent</code><br><code>ssh-add /c/Users/chenjs/.ssh/id_rsa</code><br>.将<code>SSH</code>公钥添加到<code>GitHub</code>账户</p>\n<p>.配置<code>GitHub</code>账户使用 <code>SSH key</code></p>\n<p>.先复制<code>SSH</code>公钥的完整内容<code>（/c/Users/chenjs/.ssh/id_rsa.pub）</code><br><code>clip &lt; /c/Users/chenjs/.ssh/id_rsa.pub</code></p>\n<p>.进入<code>GitHub</code>的设置页面（登录<code>GitHub</code>，在右上角）,点击左部侧边栏的<code>SSH keys</code> 选项,<br>.点击<code>Add SSH key</code>按钮<br>.在<code>Title</code>输入框内，为你的新<code>key</code>取个名字，在<code>Key</code>输入框内，粘贴前面复制好的公钥内容，然后点击 <code>Add key</code>按钮即可。<br>.最後打开 <code>Git Bash</code> 输入：<br><code>ssh -T git@github.com</code><br>如果提示的用戶名是自己設置的那個，説明成功。</p>\n<h2 id=\"貼一下-bashrc裏的快捷方式-後面那個是我的-npmrc\"><a href=\"#貼一下-bashrc裏的快捷方式-後面那個是我的-npmrc\" class=\"headerlink\" title=\"貼一下.bashrc裏的快捷方式(後面那個是我的.npmrc)\"></a>貼一下.bashrc裏的快捷方式(後面那個是我的.npmrc)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/code</span><br><span class=\"line\">. ~/repos/z/z.sh</span><br><span class=\"line\">export PYTHONIOENCODING=UTF-8</span><br><span class=\"line\">export LANG=&apos;en_US.UTF-8&apos;</span><br><span class=\"line\">export LC_ALL=&apos;en_US.UTF-8&apos;</span><br><span class=\"line\">export PATH=&quot;$PATH:/c/Software/GnuWin32/bin/&quot;</span><br><span class=\"line\">export PATH=&quot;$PATH:C:\\Users\\perge\\code\\pergeryfly.github.io\\node_modules\\.bin&quot;</span><br><span class=\"line\">alias j=&apos;z&apos;</span><br><span class=\"line\">alias gst=&quot;git status -sb&quot;</span><br><span class=\"line\">alias ga=&quot;git add&quot;</span><br><span class=\"line\">alias gc=&quot;git commit -v&quot;</span><br><span class=\"line\">alias gcc=&quot;git commit . -m update&quot;</span><br><span class=\"line\">alias gp=&quot;git push&quot;</span><br><span class=\"line\">alias gl=&quot;git pull&quot;</span><br><span class=\"line\">alias open=&quot;start&quot;</span><br><span class=\"line\">alias ll=&quot;ls -la&quot;</span><br><span class=\"line\">alias glog=&quot;git log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit -- | less&quot;</span><br><span class=\"line\">alias yd=&apos;fanyi&apos;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=https://registry.npm.taobao.org/</span><br><span class=\"line\">loglevel=http</span><br><span class=\"line\">progress=false</span><br></pre></td></tr></table></figure>\n<h2 id=\"順便寫一下命令行中的快捷键\"><a href=\"#順便寫一下命令行中的快捷键\" class=\"headerlink\" title=\"順便寫一下命令行中的快捷键\"></a>順便寫一下命令行中的快捷键</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + R 搜索历史，再次 Ctrl + R 切换 2.</span><br><span class=\"line\">Ctrl + A 行首 3.</span><br><span class=\"line\">Ctrl + E 行尾 4.</span><br><span class=\"line\">Ctrl + B 退后 5.</span><br><span class=\"line\">Ctrl + F 前进 6.</span><br><span class=\"line\">Ctrl + W 删一个单词 7.</span><br><span class=\"line\">Ctrl + Kill 干掉这一行 8.</span><br><span class=\"line\">Ctrl + Cancel 中断 9.</span><br><span class=\"line\">Ctrl + Go 退出搜索</span><br></pre></td></tr></table></figure>","categories":["git"],"tags":["gitbash"]},{"title":"简单实现一个jQuery的API","url":"http://yoursite.com/2019/05/03/简单实现一个jQuery的API/","content":"<p><code>DOM</code>的<code>API</code>应该可以算是反人类了，所以JQuery应运而生。在我的理解里，jQuery应该就是把<code>DOM</code>的<code>API</code>封装成函数 ，配合事件绑定实现功能，举例来说就是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $div = $(&apos;div&apos;)    //输入div</span><br><span class=\"line\">$div.addClass(&apos;red&apos;)  // 可将所有 div 的 class 添加一个 red</span><br><span class=\"line\">$div.setText(&apos;hi&apos;)  // 可将所有 div 的 textContent 变为 hi</span><br></pre></td></tr></table></figure></p>\n<p>这里哟们可以用<code>DOM</code>来试着实现同样的效果。</p>\n<h1 id=\"DOM代码\"><a href=\"#DOM代码\" class=\"headerlink\" title=\"DOM代码\"></a>DOM代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = function(_x)&#123;</span><br><span class=\"line\">  let e;</span><br><span class=\"line\">  if(typeof _x === &quot;string&quot;)&#123;</span><br><span class=\"line\">    e = document.querySelectorAll(_x);</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    e = _x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    addClass: function(_classStr)&#123;</span><br><span class=\"line\">      for(let i=0; i&lt;e.length;i++)&#123;</span><br><span class=\"line\">        e[i].classList.add(_classStr);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setText: function(_textStr)&#123;</span><br><span class=\"line\">      for(let i=0; i&lt;e.length;i++)&#123;</span><br><span class=\"line\">        e[i].textContent = _textStr;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.$ = jQuery</span><br><span class=\"line\"></span><br><span class=\"line\">var $div = $(&apos;div&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">$div.addClass(&apos;red&apos;) // 可将所有 div 的 class 添加一个 red</span><br><span class=\"line\">$div.setText(&apos;hi&apos;) // 可将所有 div 的 textContent 变为 hi</span><br></pre></td></tr></table></figure>\n<h1 id=\"细节描述\"><a href=\"#细节描述\" class=\"headerlink\" title=\"细节描述\"></a>细节描述</h1><h2 id=\"1-传递参数\"><a href=\"#1-传递参数\" class=\"headerlink\" title=\"1.传递参数\"></a>1.传递参数</h2><p><code>var $div =$(&#39;div&#39;)</code><br>要实现上面这个功能，我的理解是首先设置window对象jQuery为函数返回的结果，然后把参数’div’传递到函数内的DOM，作为变量进行下一步的操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery=function（selector）&#123;  </span><br><span class=\"line\">let alldiv=document.querySelectorAll(selector)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.$ = jQuery</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-返回对象\"><a href=\"#2-返回对象\" class=\"headerlink\" title=\"2.返回对象\"></a>2.返回对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$div.addClass(&apos;red&apos;)  // 可将所有 div 的 class 添加一个 red</span><br><span class=\"line\">$div.setText(&apos;hi&apos;)  // 可将所有 div 的 textContent 变为 hi</span><br></pre></td></tr></table></figure>\n<p>可以观察得到$div是一个对象，它的key有addClass和setText。</p>\n<p>那我也返回一个含有addClass和setClass的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery=function (selector)&#123;</span><br><span class=\"line\">let alldiv=document.querySelectorAll(selector)  </span><br><span class=\"line\">  return&#123;</span><br><span class=\"line\">       addClass:function ()&#123;&#125;,</span><br><span class=\"line\">       setClass：function()&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.$ = jQuery</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-补全对象的key\"><a href=\"#3-补全对象的key\" class=\"headerlink\" title=\"3.补全对象的key\"></a>3.补全对象的key</h2><p>我们得到了alldiv，它是一个伪数组。如果每个div都要添加class的话，需要一个for循环，然后每一次用DOM的方法里的classList.add功能对div添加class。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addClass: function()&#123;</span><br><span class=\"line\">               for(var i=0;i&lt;alldiv.length;i++)&#123;</span><br><span class=\"line\">                   alldiv[i].classList.add(&quot;red&quot;)</span><br><span class=\"line\">               &#125;</span><br></pre></td></tr></table></figure></p>\n<p>同理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setText: function()&#123;</span><br><span class=\"line\">               for(var i=0;i&lt;alldiv.length;i++)&#123;</span><br><span class=\"line\">                  alldiv[i].textContent = &quot;hi&quot;</span><br><span class=\"line\">              &#125;</span><br></pre></td></tr></table></figure></p>\n<p>把addClass和setText的内容结合到函数内，得到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery=function (selector)&#123;</span><br><span class=\"line\">  let alldiv=document.querySelectorAll(selector)</span><br><span class=\"line\">  return&#123;</span><br><span class=\"line\">       addClass: function()&#123;</span><br><span class=\"line\">               for(var i=0;i&lt;alldiv.length;i++)&#123;</span><br><span class=\"line\">                   alldiv[i].classList.add(&quot;red&quot;)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       setText: function()&#123;</span><br><span class=\"line\">               for(var i=0;i&lt;alldiv.length;i++)&#123;</span><br><span class=\"line\">                  alldiv[i].textContent = &quot;hi&quot;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.$ = jQuery</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这样就简单实现了一个jQuery的API,原理大致相同，但jQuery的细节应该更加充实了。</p>\n","categories":["jQuery"],"tags":["jQuery"]},{"title":"原型与原型链","url":"http://yoursite.com/2019/04/14/原型与原型链/","content":"<h1 id=\"1-全局对象window\"><a href=\"#1-全局对象window\" class=\"headerlink\" title=\"1.全局对象window\"></a>1.全局对象window</h1><p>ECMAScript 规定全局对象叫做 global，但是浏览器把 window 作为全局对象（浏览器先存在的）<br>window 就是一个哈希表，有很多属性。<br>window 的属性就是全局变量。<br>这些全局变量分为两种：</p>\n<h2 id=\"1-一种是-ECMAScript-规定的\"><a href=\"#1-一种是-ECMAScript-规定的\" class=\"headerlink\" title=\"1.一种是 ECMAScript 规定的\"></a>1.一种是 ECMAScript 规定的</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global.parseInt</span><br><span class=\"line\">global.parseFloat</span><br><span class=\"line\">global.Number</span><br><span class=\"line\">global.String</span><br><span class=\"line\">global.Boolean</span><br><span class=\"line\">global.Object</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-一种是浏览器自己加的属性\"><a href=\"#2-一种是浏览器自己加的属性\" class=\"headerlink\" title=\"2.一种是浏览器自己加的属性\"></a>2.一种是浏览器自己加的属性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.alert</span><br><span class=\"line\">window.prompt</span><br><span class=\"line\">window.comfirm</span><br><span class=\"line\">window.console.log</span><br><span class=\"line\">window.console.dir</span><br><span class=\"line\">window.document</span><br><span class=\"line\">window.document.createElement</span><br><span class=\"line\">window.document.getElementById</span><br></pre></td></tr></table></figure>\n<p>所有API都可以在MDN里找到详细的资料。</p>\n<h1 id=\"原型与原型链\"><a href=\"#原型与原型链\" class=\"headerlink\" title=\"原型与原型链\"></a>原型与原型链</h1><h2 id=\"1-原型\"><a href=\"#1-原型\" class=\"headerlink\" title=\"1.原型\"></a>1.原型</h2><p>所有对象都有<code>toString</code>和 <code>valueOf</code> 属性，那么我们是否有必要给每个对象一个 <code>toString</code>和 <code>valueOf</code>呢？<br>明显不需要。JS 的做法是把 <code>toString</code> 和 <code>valueOf</code>放在一个对象里（暂且叫做公用属性组成的对象）,然后让每一个对象的<code>__proto__</code>存储这个「公用属性组成的对象」的地址。这个对象中存储的公有属性就是原型。</p>\n<p> 1.每一个构造函数都拥有一个prototype属性，这个属性指向一个对象，也就是原型对象。当使用这个构造函数创建实例的时候，prototype属性指向的原型对象就成为实例的原型对象。<br> 2.原型对象默认拥有一个constructor属性，指向指向它的那个构造函数（也就是说构造函数和原型对象是互相指向的关系）。<br> 3.每个对象都拥有一个隐藏的属性[[prototype]]，指向它的原型对象，这个属性可以通过<br>Object.getPrototypeOf(obj) 或 obj.<strong>proto</strong> 来访问。<br> 4.实际上，构造函数的prototype属性与它创建的实例对象的[[prototype]]属性指向的是同一个对象，即 对象.<strong>proto</strong> === 函数.prototype 。<br>5.如上文所述，原型对象就是用来存放实例中共有的那部分属性。<br>6.在JavaScript中，所有的对象都是由它的原型对象继承而来，反之，所有的对象都可以作为原型对象存在。<br>7.访问对象的属性时，JavaScript会首先在对象自身的属性内查找，若没有找到，则会跳转到该对象的原型对象中查找。</p>\n<h2 id=\"2-原型链与继承\"><a href=\"#2-原型链与继承\" class=\"headerlink\" title=\"2.原型链与继承\"></a>2.原型链与继承</h2><p>JavaScript中所有的对象都是由它的原型对象继承而来。而原型对象自身也是一个对象，它也有自己的原型对象，这样层层上溯，就形成了一个类似链表的结构，这就是原型链（prototype chain）。<br>所有原型链的终点都是Object函数的prototype属性，因为在JavaScript中的对象都默认由Object()构造。Objec.prototype指向的原型对象同样拥有原型，不过它的原型是null，而null则没有原型。通过原型链就可以在JavaScript中实现继承。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var 对象 = new 函数()</span><br><span class=\"line\">对象.__proto__ === 对象的构造函数.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">// 推论</span><br><span class=\"line\">var number = new Number()</span><br><span class=\"line\">number.__proto__ = Number.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var object = new Object()</span><br><span class=\"line\">object.__proto__ = Object.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var function = new Function()</span><br><span class=\"line\">function.__proto__ = Function.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">// 另外，所有函数都是由 Function 构造出来的，所以</span><br><span class=\"line\">Number.__proto__ = Function.prototype // 因为 Number 是函数，是 Function 的实例</span><br><span class=\"line\">Object.__proto__ = Function.prototype // 因为 Object 是函数，是 Function 的实例</span><br><span class=\"line\">Function.__proto__ == Function.prototye // 因为 Function 是函数，是 Function 的实例！</span><br></pre></td></tr></table></figure></p>\n","categories":["JS 原型链"],"tags":["JS"]},{"title":"JS数据类型","url":"http://yoursite.com/2019/04/14/JS数据类型/","content":"<p>JS共有七种数据类型：number、string、boolean、symbol、underfined、null，以及object。这其中boolean类型不常用，不做赘述，这次对其他6种数据类型总结一波。</p>\n<h1 id=\"1-分类\"><a href=\"#1-分类\" class=\"headerlink\" title=\"1.分类\"></a>1.分类</h1><p>从不同角度对6种数据类型进行分类：<br><img src=\"./1.png\" alt=\"img\"></p>\n<h1 id=\"2-判断\"><a href=\"#2-判断\" class=\"headerlink\" title=\"2.判断\"></a>2.判断</h1><h2 id=\"1-typeof\"><a href=\"#1-typeof\" class=\"headerlink\" title=\"1.typeof\"></a>1.typeof</h2><p>typeof返回一个表示数据类型的字符串。返回结果包括number、string、boolean、underfined、null，以及object。typeof可以对基本类型number、string  、boolean、undefined做出准确的判断（null除外，typeof null===“object”，这是由于历史的原因，我就不巴拉巴拉了，其实我也说不清楚😢）；而对于引用类型，除了function之外返回的都是object。但当我们需要知道某个对象的具体类型时，typeof就显得有些力不从心了</p>\n<h2 id=\"2-instanceof\"><a href=\"#2-instanceof\" class=\"headerlink\" title=\"2.instanceof\"></a>2.instanceof</h2><p>当我们需要知道某个对象的具体类型时,可以用运算符 <code>instanceof，instanceof</code>操作符判断左操作数对象的原型链上是否有右边这个构造函数的<code>prototype</code>属性，也就是说指定对象是否是某个构造函数的实例，最后返回布尔值。 检测的我们用一段伪代码来模拟instanceof内部执行过程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instanceof (A,B) = &#123;</span><br><span class=\"line\">    var L = A.__proto__;</span><br><span class=\"line\">    var R = B.prototype;</span><br><span class=\"line\">    if(L === R) &#123;</span><br><span class=\"line\">        //A的内部属性__proto__指向B的原型对象</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-delete\"><a href=\"#3-delete\" class=\"headerlink\" title=\"3.delete\"></a>3.delete</h2><p>我们可以使用<code>delete</code>操作符删除对象里的key，使用如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj =&#123;name：&quot;xxx&quot;；&#125;</span><br><span class=\"line\">delete obj.name</span><br><span class=\"line\">&quot;name&quot; in obj //false</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-forin\"><a href=\"#4-forin\" class=\"headerlink\" title=\"4.forin\"></a>4.forin</h2><p><code>for...in</code>循环用来遍历一个对象的全部属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i in obj) &#123;</span><br><span class=\"line\">  console.log(obj[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 3</span><br></pre></td></tr></table></figure></p>\n<p>下面是一个使用<code>for...in</code>循环，提取对象属性名的例子。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  x: 1,</span><br><span class=\"line\">  y: 2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var props = [];</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var p in obj) &#123;</span><br><span class=\"line\">  props[i++] = p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">props // [&apos;x&apos;, &apos;y&apos;]</span><br></pre></td></tr></table></figure></p>\n<p><code>for..in</code>循环有两个使用注意点。</p>\n<blockquote>\n<p>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。<br>它不仅遍历对象自身的属性，还遍历继承的属性。</p>\n</blockquote>\n<h1 id=\"3-类型转换\"><a href=\"#3-类型转换\" class=\"headerlink\" title=\"3.类型转换\"></a>3.类型转换</h1><h2 id=\"1-任意类型转字符串\"><a href=\"#1-任意类型转字符串\" class=\"headerlink\" title=\"1.任意类型转字符串\"></a>1.任意类型转字符串</h2><p>1.String（x）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String(1)</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">String(true)</span><br><span class=\"line\">&quot;true&quot;</span><br><span class=\"line\">String(null)</span><br><span class=\"line\">&quot;null&quot;</span><br><span class=\"line\">String(undefined)</span><br><span class=\"line\">&quot;underfined&quot;</span><br><span class=\"line\">String(&#123;&#125;)</span><br><span class=\"line\">&quot;[object object]&quot;</span><br></pre></td></tr></table></figure></p>\n<p>2.x.toString()<br>3.x + “”</p>\n<h2 id=\"2-任意类型转数字\"><a href=\"#2-任意类型转数字\" class=\"headerlink\" title=\"2.任意类型转数字\"></a>2.任意类型转数字</h2><p>1.Number（X）<br>2.parseInt(x, 10) MDN<br>3.parseFloat(x) MDN<br>4.x - 0<br>5.+x</p>\n<h2 id=\"3-任意类型转布尔\"><a href=\"#3-任意类型转布尔\" class=\"headerlink\" title=\"3.任意类型转布尔\"></a>3.任意类型转布尔</h2><p>1.Boolean（x）<br>2.！！x<br>五个falsy值0、NaN、“”、null、underfined。<br>对象转布尔永远是true。</p>\n<h1 id=\"4-内存图\"><a href=\"#4-内存图\" class=\"headerlink\" title=\"4.内存图\"></a>4.内存图</h1><p>JS引擎将内存分为代码区和数据区，其中数据区区分为Stack（栈内存）和Heap（堆内存），简单类型的数据直接存在Stack里，复杂类型的数是把Heap地址存在Stack里。</p>\n<h1 id=\"5-深拷贝与浅拷贝\"><a href=\"#5-深拷贝与浅拷贝\" class=\"headerlink\" title=\"5.深拷贝与浅拷贝\"></a>5.深拷贝与浅拷贝</h1><h2 id=\"1-对于简单类型来说，复制就是深拷贝。\"><a href=\"#1-对于简单类型来说，复制就是深拷贝。\" class=\"headerlink\" title=\"1.对于简单类型来说，复制就是深拷贝。\"></a>1.对于简单类型来说，复制就是深拷贝。</h2><h2 id=\"2-对于复杂类型的数据（对象）来说。才要区分浅拷贝和深拷贝。\"><a href=\"#2-对于复杂类型的数据（对象）来说。才要区分浅拷贝和深拷贝。\" class=\"headerlink\" title=\"2.对于复杂类型的数据（对象）来说。才要区分浅拷贝和深拷贝。\"></a>2.对于复杂类型的数据（对象）来说。才要区分浅拷贝和深拷贝。</h2><p>这是一个浅拷贝的例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;name: &apos;frank&apos;&#125;</span><br><span class=\"line\">var b = a</span><br><span class=\"line\">b.name = &apos;b&apos;</span><br><span class=\"line\">a.name === &apos;b&apos; // true</span><br></pre></td></tr></table></figure></p>\n<p>这里对b进行更改后，a也随之变化，这就是典型的浅拷贝。<br>对于深拷贝而言，对b进行更改，a不会产生变化，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;name: &apos;frank&apos;&#125;</span><br><span class=\"line\">var b = deepClone(a) // deepClone 还不知道怎么实现</span><br><span class=\"line\">b.name = &apos;b&apos;</span><br><span class=\"line\">a.name === &apos;frank&apos; // true</span><br></pre></td></tr></table></figure></p>\n<p>这就是典型的深拷贝了。</p>\n","categories":["JS"],"tags":["JS"]},{"title":"hexo重装","url":"http://yoursite.com/2019/03/19/hexo重装/","content":"<p>最近我的小米笔记本硬盘存储吃紧，加了块硬盘结果出了问题只能重装系统。搞得什麽都要重新配置，今天刚配置完git发现个人博客居然崩了，着实不能忍，Google了一波，决定放弃目录，重新来过。</p>\n<h2 id=\"1-新建blog文件，初始化。\"><a href=\"#1-新建blog文件，初始化。\" class=\"headerlink\" title=\"1. 新建blog文件，初始化。\"></a>1. 新建<code>blog</code>文件，初始化。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir blog</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-改动-config-yml文件。\"><a href=\"#2-改动-config-yml文件。\" class=\"headerlink\" title=\"2. 改动 _config.yml文件。\"></a>2. 改动 <code>_config.yml</code>文件。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: 仓库地址</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-文件覆盖\"><a href=\"#3-文件覆盖\" class=\"headerlink\" title=\"3. 文件覆盖\"></a>3. 文件覆盖</h2><p> 覆盖<code>module、source、themes</code>文件夹，主题居然还可以正常使用，很是nice。</p>\n<h2 id=\"4-登录检测\"><a href=\"#4-登录检测\" class=\"headerlink\" title=\"4. 登录检测\"></a>4. 登录检测</h2><p>高兴的我<code>hexo g</code>一下，又<code>hexo s</code>一下，打开浏览器输入网址<code>http://localhost:4000</code>，美滋滋，我的博客全回来了。</p>\n<h2 id=\"5-终曲\"><a href=\"#5-终曲\" class=\"headerlink\" title=\"5.终曲\"></a>5.终曲</h2><p> ok，是时候去<code>github</code>嗨一波了，果断敲出<br> <code>hexo d</code><br>于是bash告诉我<br>    <code>ERROR Deployer not found: git</code><br>问题不大，只要继续<br>    <code>npm install hexo-deployer-git --save</code><br>Enjoy :)</p>\n","categories":["hexo"],"tags":["hexo git npm"]},{"title":"css布局","url":"http://yoursite.com/2019/01/10/css布局/","content":"<h1 id=\"左右布局\"><a href=\"#左右布局\" class=\"headerlink\" title=\"左右布局\"></a>左右布局</h1><h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><hr>\n<p>这里使用了<strong>浮动</strong>来实现左右布局。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.left&#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 30%;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  line-height: 600px;</span><br><span class=\"line\">  color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 70%;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background: yellow;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  line-height: 600px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>显示效果</strong><br><img src=\"css布局/1.jpg\" alt><br>浮动为什么会被使用在布局中呢？因为设置浮动后的元素会形成BFC（使得内部的元素不会被外部所干扰），并且元素的宽度也不再自适应父元素宽度，而是适应自身内容。这样就可以，轻松地实现多栏布局的效果。<br>类似于ps中的图层一样，浮动的元素会在浮动层上面进行排布，而在原先文档流中的元素位置，会被以某种方式进行删除，但是还是会影响布局。如果做过浮动，但未做清除，那么将会造成<strong>高度塌陷</strong>的问题。而<strong>清除浮动</strong>，最常用的方法有两种:</p>\n<ul>\n<li>overflow: 将父元素的overflow，设置成hidden。</li>\n<li>after伪类：对子元素的after伪类进行设置。<h2 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h2></li>\n</ul>\n<hr>\n<p> 除了浮动以外，使用<strong>定位</strong>也可以实现同样的效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .left&#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  width: 400px;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  line-height: 600px;</span><br><span class=\"line\">  color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left:400px;</span><br><span class=\"line\">  top:-600px;</span><br><span class=\"line\">  width:400px;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background: yellow;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  line-height: 600px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是用的position定位实现的左右布局</p>\n<h1 id=\"左中右布局\"><a href=\"#左中右布局\" class=\"headerlink\" title=\"左中右布局\"></a>左中右布局</h1><hr>\n<p><strong>代码如下</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;middle&quot;&gt;中间&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.left&#123;</span><br><span class=\"line\">  float:left;</span><br><span class=\"line\">  width: 400px;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  line-height: 600px;</span><br><span class=\"line\">  color: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.middle&#123; </span><br><span class=\"line\">  float:left;</span><br><span class=\"line\">  width:400px;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background:green;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  line-height: 600px;</span><br><span class=\"line\">  color: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width:400px;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background: yellow;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  line-height: 600px;</span><br><span class=\"line\">  color:red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>显示效果</strong><br><img src=\"css布局/2.jpg\" alt></p>\n<h1 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h1><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.left&#123;</span><br><span class=\"line\">  width: 30%;</span><br><span class=\"line\">  height: 600px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  color: #fff;</span><br><span class=\"line\">  margin:0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用<code>margin:0 auto</code>使整个盒子水平居中，使用<code>text-align: center;</code>属性，实现内容居中。<br><strong>显示效果</strong><br><img src=\"css布局/3.jpg\" alt></p>\n<h1 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h1><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;content&quot;&gt;垂直居中&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@wrapWidth : 400px;</span><br><span class=\"line\"></span><br><span class=\"line\">.wrap&#123;</span><br><span class=\"line\">  margin-left: auto;</span><br><span class=\"line\">  margin-right: auto;</span><br><span class=\"line\">  margin-top: 20px;</span><br><span class=\"line\">  width: @wrapWidth;</span><br><span class=\"line\">  height: @wrapWidth;</span><br><span class=\"line\">  background-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.content&#123;</span><br><span class=\"line\">  @contentWidth : 100px;</span><br><span class=\"line\">  width: @contentWidth;</span><br><span class=\"line\">  height: @contentWidth;</span><br><span class=\"line\">  padding: (@wrapWidth - @contentWidth) / 2;</span><br><span class=\"line\">  background-color: #fff;</span><br><span class=\"line\">  background-clip:content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文本垂直居中使用<code>line-height</code>,令其值与<code>height</code>相同。<br>盒模型垂直居中使用<code>padding</code>填充来实现，当然使用<code>margin</code>也是同样的道理。<br><strong>显示效果</strong><br><img src=\"css布局/4.jpg\" alt></p>\n<h1 id=\"等其他小技巧\"><a href=\"#等其他小技巧\" class=\"headerlink\" title=\"等其他小技巧\"></a>等其他小技巧</h1><hr>\n<h2 id=\"让我来用absolute布局上下文下的水平垂直居中\"><a href=\"#让我来用absolute布局上下文下的水平垂直居中\" class=\"headerlink\" title=\"让我来用absolute布局上下文下的水平垂直居中\"></a>让我来用absolute布局上下文下的水平垂直居中</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ele margin&quot;&gt;水平垂直居中水平垂直&lt;br&gt;居中水平垂直居中水平&lt;br&gt;垂直居中水平垂直居&lt;br&gt;中水平垂直居中&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ele translate&quot;&gt;水平垂直居中水平垂直&lt;br&gt;居中水平垂直居中水平&lt;br&gt;垂直居中水平垂直居&lt;br&gt;中水平垂直居中&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;ele relative&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ele-inner&quot;&gt;水平垂直居中水平垂直&lt;br&gt;居中水平垂直居中水平&lt;br&gt;垂直居中水平垂直居&lt;br&gt;中水平垂直居中&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap&#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  border:1px solid;</span><br><span class=\"line\">  background-color: #ccc;&#125;</span><br><span class=\"line\">.ele&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    background-color: #333;&#125;</span><br><span class=\"line\">.margin&#123;</span><br><span class=\"line\">      width: 160px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      margin-left: -80px;</span><br><span class=\"line\">      margin-top: -50px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">.translate&#123;</span><br><span class=\"line\">      -webkit-transform:translate3d(-50%, -50%, 0);</span><br><span class=\"line\">      transform:translate3d(-50%, -50%, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">.ele-inner&#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      left: -50%;</span><br><span class=\"line\">      top: -50%;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      background-color: #333;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>原理很简单，就是利用<code>left：50%</code>将盒子的左边先置于父容器的中点，然后再将盒子往左偏移盒子自身宽度的50%。<br>上面三个方法中，<code>margin</code>方法和<code>relative</code>方法都需要知道元素的宽高才行(<code>relative</code>方法只知道高也行)，适用于固定式布局，而<code>transform</code>方法则可以不知道元素宽高。<br><strong>显示效果</strong><br><img src=\"css布局/5.jpg\" alt></p>\n","categories":[],"tags":[]},{"title":"用一个div画太极","url":"http://yoursite.com/2019/01/01/用一个div画太极/","content":"<h1 id=\"最近学css顺手照着画了一个太极图\"><a href=\"#最近学css顺手照着画了一个太极图\" class=\"headerlink\" title=\"最近学css顺手照着画了一个太极图\"></a>最近学css顺手照着画了一个太极图</h1><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><strong>宝宝的先天太极还是好看的呀</strong><br><img src=\"./2.jpg\" alt=\"img\"></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"./1.jpg\" alt=\"img\"></p>\n<h2 id=\"为了看起来骚气一点，加一个旋转特效\"><a href=\"#为了看起来骚气一点，加一个旋转特效\" class=\"headerlink\" title=\"为了看起来骚气一点，加一个旋转特效\"></a>为了看起来骚气一点，加一个旋转特效</h2><p><a href=\"https://pergeryfly.github.io/taiji/\" target=\"_blank\" rel=\"noopener\">旋转太极连接</a><br>这里使用了<code>transform:roltate与keyframe结合的方式</code>实现太极无限旋转。</p>\n","categories":[],"tags":[]},{"title":"html续","url":"http://yoursite.com/2018/12/18/html续/","content":"<h1 id=\"HTML常用标签\"><a href=\"#HTML常用标签\" class=\"headerlink\" title=\"HTML常用标签\"></a>HTML常用标签</h1><h2 id=\"div\"><a href=\"#div\" class=\"headerlink\" title=\"div\"></a>div</h2><p>div标签用于组合其他HTML元素，本身无实在意义。常用于页面的布局，比如一个展开式的广告页面框架大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;wrap-container&quot;&gt;</span><br><span class=\"line\">        &lt;div id=&quot;collapsed-container&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div id=&quot;expanded-container&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">h1~h6, p, span, strong, em...</span><br><span class=\"line\">此类标签用于设置文本，常见的使用方式是填充段落，比如弹出的legal框文字HTML结构如下:</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;legal-window&quot;&gt;</span><br><span class=\"line\">    &lt;h4&gt;LEGAL&lt;/h4&gt;</span><br><span class=\"line\">    &lt;img id=&quot;legal-close&quot; src=&quot;img/embed/legal-close.png&quot; alt=&quot;close window&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;*Requires a system with Intel&lt;sup&gt;&amp;reg;&lt;/sup&gt; Turbo Boost Technology. Intel&lt;sup&gt;&amp;reg;&lt;/sup&gt; Turbo Boost Technology and Intel&lt;sup&gt;&amp;reg;&lt;/sup&gt; Turbo Boost Technology 2.0 are only available on select Intel&lt;sup&gt;&amp;reg;&lt;/sup&gt; processors. Consult your PC manufacturer. Performance varies depending on hardware, software, and system configuration. For more information, visit http://www.intel.com/go/turbo. Copyright &amp;copy; 2014 Intel Corporation. All rights reserved. Intel, the Intel logo, Intel Core, Look Inside, Intel Inside, and Pentium are trademarks of Intel Corporation in the U.S. and/or other countries. Other names and brands may be claimed as the property of others.&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">ul, li, ol, dl, dt, dd</span><br><span class=\"line\">此类标签用于设置带有列表内容的，比如导航栏的下拉菜单，多视频的缩略图等：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul class=&quot;nav-tools-list&quot;&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;img src=&quot;shoppingtools-icon-1.png&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;Build &amp; Price&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;img src=&quot;shoppingtools-icon-2.png&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;Incentives &amp; Offers&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;img src=&quot;shoppingtools-icon-3.png&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;Request a Local Quote&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;img src=&quot;shoppingtools-icon-4.png&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;Search Dealer Inventory&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"form表单相关\"><a href=\"#form表单相关\" class=\"headerlink\" title=\"form表单相关\"></a>form表单相关</h2><p>页面中涉及到表单时候，需要使用到form相关标签：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form name=&quot;frm-sample&quot; class=&quot;frm-sample&quot; action=&quot;try&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Name&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;status-message&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div id=&quot;sample-captcha&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;a id=&quot;check-is-filled&quot; class=&quot;info-btn&quot;&gt;Check if visualCaptcha is filled&lt;/a&gt;</span><br><span class=\"line\">    &lt;button type=&quot;submit&quot; name=&quot;submit-bt&quot; class=&quot;submit&quot;&gt;Submit form&lt;/button&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"table表格相关\"><a href=\"#table表格相关\" class=\"headerlink\" title=\"table表格相关\"></a>table表格相关</h2><p>页面中涉及到table结构，需要使用到table相关标签:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;talbe&gt;&lt;/talbe&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"img-canvas\"><a href=\"#img-canvas\" class=\"headerlink\" title=\"img, canvas\"></a>img, canvas</h2><p>用于图像显示。一般不直接操作img,canvas元素，而是在它的外层包裹一层父级元素（可以为span,div等)，对父级元素进行操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;preload&quot; data-src=&quot;CheddarBacon.png&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&quot;CheddarBacon.png&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- or --&gt;</span><br><span class=\"line\">&lt;div id=&quot;sprite-car&quot; class=&quot;cw-sprite sprite-car&quot; cw-interval=&quot;30&quot; cw-loops=&quot;1&quot; cw-auto-play=&quot;false&quot; cw-texture=&quot;images/sprites/expanded/car-texture.png&quot; cw-mapper=&quot;car&quot;&gt;</span><br><span class=\"line\">    &lt;canvas class=&quot;cw-renderer&quot; width=&quot;460&quot; height=&quot;130&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h2><p>a标签用于打开链接，发送邮件，段落跳转等功能。使用时需要注意阻止掉标签的默认事件。</p>\n<p>链接跳转，常见的关于分享按钮的HTML结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;shareBox&quot;&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &lt;li id=&quot;facebook&quot;&gt;</span><br><span class=\"line\">            &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-shareWay=&quot;facebook&quot;&gt;</span><br><span class=\"line\">                &lt;img alt=&quot;Post on Facebook&quot; src=&quot;img/embed/f4Icon3.png&quot; alt=&quot;Facebook&quot; /&gt;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">        &lt;li id=&quot;twitter&quot;&gt;</span><br><span class=\"line\">            &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-shareWay=&quot;twitter&quot;&gt;</span><br><span class=\"line\">                &lt;img alt=&quot;Tweet this&quot; src=&quot;img/embed/f4Icon4.png&quot; /&gt;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">        &lt;li id=&quot;pinterest&quot;&gt;</span><br><span class=\"line\">            &lt;a data-pin-do=&quot;buttonPin&quot; data-pin-config=&quot;none&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-shareWay=&quot;pinterest&quot;&gt;</span><br><span class=\"line\">                &lt;img alt=&quot;Pin it&quot; src=&quot;img/embed/f4Icon5.png&quot; /&gt;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">        &lt;li id=&quot;email&quot;&gt;</span><br><span class=\"line\">            &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; data-shareWay=&quot;email&quot;&gt;</span><br><span class=\"line\">                &lt;img src=&quot;img/embed/f4Icon6.png&quot; /&gt;</span><br><span class=\"line\">            &lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>发送邮件的代码片段如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;button&quot;&gt;</span><br><span class=\"line\">  &lt;a class=&quot;mail&quot; data-img=&quot;mail.png&quot; href=&quot;mailto:example@gmail.com?subject=xxx&amp;body=xxx&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>段落跳转代码片段如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;html5&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;a name=&quot;user-content-html5&quot; href=&quot;#html5&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;headeranchor&quot;&gt;&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"HTML5标签查询\"><a href=\"#HTML5标签查询\" class=\"headerlink\" title=\"HTML5标签查询\"></a>HTML5标签查询</h2><p>W3School: <a href=\"https://www.w3schools.com\" title=\"w3school\" target=\"_blank\" rel=\"noopener\">点击查询</a></p>\n<p>html5-cheat-sheet</p>\n","categories":[],"tags":[]},{"title":"html","url":"http://yoursite.com/2018/12/18/html/","content":"<h1 id=\"W3C-简介\"><a href=\"#W3C-简介\" class=\"headerlink\" title=\"W3C 简介\"></a>W3C 简介</h1><blockquote>\n<p>  网站    <a href=\"www.w3.org W3C\">W3C</a><br>  万维网联盟（World Wide Web Consortium，W3C），又称W3C理事会，是万维网的主要国际标准组织。为半自治非政府组织 。为解决网络应用中不同平台、技术和开发者带来的不兼容问题，保障网络   信息的顺利和完整流通，万维网联盟制定了一系列标准并督促网络应用开发者和内容提供者遵循这些标准。标准的内容包括使用语言的   规范，开发中使用的导则和解释引擎的行为等等。W3C也制定了包括XML和CSS等的众多影响深远的标准规范。 但是，W3C制定的网络标   准似乎并非强制，而只是推荐标准。因此部分网站仍然不能完全实现这些标准，特别是使用早期所见即所得网页编辑软件设计的网页往   往会包含大量非标准代码。</p>\n</blockquote>\n<h1 id=\"MDN-简介\"><a href=\"#MDN-简介\" class=\"headerlink\" title=\"MDN 简介\"></a>MDN 简介</h1><blockquote>\n<p>  MDN Web Docs<br>  MDN Web Docs.svg<br>  网站    <a href=\"developer.mozilla.org\" title=\"MDN\">MDN</a><br>  MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网络技术开发文档的免费网站。该项目始于2005年，最初由Mozilla公司员工Deb Richardson领导。自2006年以来，文档工作由Eric Shepherd领导。网站最初的内容是由DevEdge提供，但在AOL收购Netscape后，DevEdge网站也宣布关闭。为此Mozilla基金会向AOL获取了DevEdge发布的内容，同时将DevEdge内容搬移到mozilla.org。MDN本身有一个论坛，并在Mozilla IRC网络上有一个IRC频道#mdn。MDN由Mozilla公司提供服务器和员工的资助。2016年10月3日发表的Brave网页浏览器将MDN作为其搜索引擎选项之一。</p>\n</blockquote>\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><blockquote>\n<p> HTML（超文本标记语言）<br> 网站 <a href=\"www.w3.org/html/\" title=\"w3c\">w3c</a><br> 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被众多网站用于设计令人赏心悦目的网页、网页应用程序以及移动应用程序的用户界面[3]。网页浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个网站的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。<br> HTML元素是构建网站的基石。HTML允许嵌入图像与对象，并且可以用于创建交互式表单，它被用来结构化信息——例如标题、段落和列表等等，也可用来在一定程度上描述文档的外观和语义。HTML的语言形式为尖括号包围的HTML元素（如<html>），浏览器使用HTML标签和脚本来诠释网页内容，但不会将它们显示在页面上。</html></p>\n</blockquote>\n<h1 id=\"什么是空标签\"><a href=\"#什么是空标签\" class=\"headerlink\" title=\"什么是空标签\"></a>什么是空标签</h1><blockquote>\n<p>  一个空元素（empty element）可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。HTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 <audio> 元素嵌套在一个 <hr> 元素里。<br>  在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如，<code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code>的闭标签是无效的 HTML。在 HTML 中有以下这些空元素：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- &lt;area&gt;</span><br><span class=\"line\">+ &lt;base&gt;</span><br><span class=\"line\">- &lt;br&gt;</span><br><span class=\"line\">+ &lt;col&gt;</span><br><span class=\"line\">- &lt;colgroup&gt; when the span is present</span><br><span class=\"line\">- &lt;command&gt;</span><br><span class=\"line\">+ &lt;embed&gt;</span><br><span class=\"line\">- &lt;hr&gt;</span><br><span class=\"line\">+ &lt;img&gt;</span><br><span class=\"line\">- &lt;input&gt;</span><br><span class=\"line\">- &lt;keygen&gt;</span><br><span class=\"line\">+ &lt;link&gt;</span><br><span class=\"line\">+ &lt;meta&gt;</span><br><span class=\"line\">+ &lt;param&gt;</span><br><span class=\"line\">- &lt;source&gt;</span><br><span class=\"line\">+ &lt;track&gt;</span><br><span class=\"line\">+ &lt;wbr&gt;</span><br></pre></td></tr></table></figure></audio></p>\n</blockquote>\n<h1 id=\"什么是可替换标签\"><a href=\"#什么是可替换标签\" class=\"headerlink\" title=\"什么是可替换标签\"></a>什么是可替换标签</h1><blockquote>\n<p>  CSS 里，可替换元素<code>（replaced element）</code>的展现不是由CSS来控制的。这些元素是一类 外观渲染独立于CSS的 外部对象。 典型的可替换元素有<code>&lt;img&gt;、 &lt;object&gt;、 &lt;video&gt;</code> 和 表单元素，如<code>&lt;textarea&gt;、 &lt;input&gt;</code> 。 某些元素只在一些特殊情况下表现为可替换元素，例如<code>&lt;audio&gt;</code>和 <code>&lt;canvas&gt;</code> 。 通过 CSS content 属性来插入的对象 被称作 匿名可替换元素（anonymous replaced elements）。</p>\n</blockquote>\n<blockquote>\n<p>  CSS在某些情况下会对可替换元素做特殊处理，比如计算外边距和一些auto值。</p>\n</blockquote>\n<blockquote>\n<p>  需要注意的是，一部分（并非全部）可替换元素，本身具有尺寸和基线（baseline），会被像<code>vertical-align</code>之类的一些 CSS 属性用到。</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"http入门","url":"http://yoursite.com/2018/12/13/http入门/","content":"<h1 id=\"关于http的请求与响应\"><a href=\"#关于http的请求与响应\" class=\"headerlink\" title=\"关于http的请求与响应\"></a>关于http的请求与响应</h1><h2 id=\"http请求\"><a href=\"#http请求\" class=\"headerlink\" title=\"http请求\"></a>http请求</h2><p><strong>请求示例</strong><br><code>curl -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>请求的内容为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: www.baidu.com</span><br><span class=\"line\">User-Agent: curl/7.54.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Frank: xxx</span><br></pre></td></tr></table></figure></p>\n<p><strong>请求的格式</strong><br>1 动词 路径 协议/版本<br>2 Key1: value1<br>2 Key2: value2<br>2 Key3: value3<br>2 Content-Type: application/x-www-form-urlencoded<br>2 Host: <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a><br>2 User-Agent: curl/7.54.0<br>3<br>4 要上传的数据<br><strong>用 Chrome 发请求</strong><br>1.打开 Network<br>2.地址栏输入网址<br>3.在 Network 点击，查看 request，点击「view source」<br>4.点击「view source」，可以看到请求的前三部分了</p>\n<h2 id=\"http响应\"><a href=\"#http响应\" class=\"headerlink\" title=\"http响应\"></a>http响应</h2><p><strong>响应示例</strong><br>前面的请求对应的响应：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Length: 2443</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Date: Tue, 10 Oct 2017 09:14:05 GMT</span><br><span class=\"line\">Etag: &quot;5886041d-98b&quot;</span><br><span class=\"line\">Last-Modified: Mon, 23 Jan 2017 13:24:45 GMT</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Server: bfe/1.0.8.18</span><br><span class=\"line\">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……</span><br></pre></td></tr></table></figure></p>\n<p><strong>响应的格式</strong><br>1 协议/版本号 状态码 状态解释<br>2 Key1: value1<br>2 Key2: value2<br>2 Content-Length: 17931<br>2 Content-Type: text/html<br>3<br>4 要下载的内容<br><strong>用 Chrome 查看响应</strong><br>1.打开 Network<br>2.输入网址<br>3.选中第一个响应<br>4.查看 Response Headers，点击「view source,会看到响应的前两部分<br>5.查看 Response 或者 Preview，你会看到响应的第 4 部分</p>\n","categories":[],"tags":[]},{"title":"Git入门","url":"http://yoursite.com/2018/12/05/Git入门/","content":"<h1 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h1><h2 id=\"创建空目录\"><a href=\"#创建空目录\" class=\"headerlink\" title=\"创建空目录\"></a>创建空目录</h2><p>创建空目录，并进入。</p>\n<h2 id=\"在gitbush上输入git-init\"><a href=\"#在gitbush上输入git-init\" class=\"headerlink\" title=\"在gitbush上输入git init\"></a>在gitbush上输入git init</h2><p><img src=\"Git入门/1.jpg\" alt=\"正常\"><br>通过git init 命令将次目录变成Git可以管理的仓库<br>注 ：此时会发现多了一个.git 目录，此目录用来管理版本库。</p>\n<h1 id=\"将文件加入仓库\"><a href=\"#将文件加入仓库\" class=\"headerlink\" title=\"将文件加入仓库\"></a>将文件加入仓库</h1><h2 id=\"输入命令-git-add\"><a href=\"#输入命令-git-add\" class=\"headerlink\" title=\"输入命令 git add\"></a>输入命令 git add</h2><p><img src=\"Git入门/2.jpg\" alt><br>git add命令主要用于把我们要提交的文件的信息添加到索引库中,用命令git add告诉Git，把文件添加到仓库</p>\n<h1 id=\"把文件提交到仓库\"><a href=\"#把文件提交到仓库\" class=\"headerlink\" title=\"把文件提交到仓库\"></a>把文件提交到仓库</h1><h2 id=\"输入命令-git-commit-v\"><a href=\"#输入命令-git-commit-v\" class=\"headerlink\" title=\"输入命令 git commit -v\"></a>输入命令 git commit -v</h2><p><img src=\"Git入门/3.jpg\" alt><br>这个命令可以帮助我们把文件提交到仓库<br>miao</p>\n","categories":[],"tags":[]},{"title":"常用命令行使用","url":"http://yoursite.com/2018/12/05/命令行使用/","content":"<h1 id=\"常用命令行使用\"><a href=\"#常用命令行使用\" class=\"headerlink\" title=\"常用命令行使用\"></a>常用命令行使用</h1><h2 id=\"关于ls\"><a href=\"#关于ls\" class=\"headerlink\" title=\"关于ls\"></a>关于ls</h2><p>ls命令是我们最常用的命令之一，全称list，罗列的意思，顾名思义ls这个命令可以查看文件权限（包括目录、文件夹、文件权限），在日常的命令行操作中应用极多</p>\n<h3 id=\"命令格式：\"><a href=\"#命令格式：\" class=\"headerlink\" title=\"命令格式：\"></a>命令格式：</h3><p>ls [选项] [目录名]<br><img src=\"命令行使用/1.jpg\" alt></p>\n<h3 id=\"命令功能：\"><a href=\"#命令功能：\" class=\"headerlink\" title=\"命令功能：\"></a>命令功能：</h3><p>列出目标目录中所有的子目录和文件。</p>\n<h3 id=\"常用参数：\"><a href=\"#常用参数：\" class=\"headerlink\" title=\"常用参数：\"></a>常用参数：</h3><p>-a, –all 列出目录下的所有文件，包括以 . 开头的隐含文件</p>\n<p>-A 同-a，但不列出“.”(表示当前目录)和“..”(表示当前目录的父目录)。</p>\n<p>-c  配合 -lt：根据 ctime 排序及显示 ctime (文件状态最后更改的时间)配合 -l：显示 ctime 但根据名称排序否则：根据 ctime 排序</p>\n<p>-C 每栏由上至下列出项目</p>\n<p>–color[=WHEN] 控制是否使用色彩分辨文件。WHEN 可以是’never’、’always’或’auto’其中之一</p>\n<p>-d, –directory 将目录象文件一样显示，而不是显示其下的文件。</p>\n<p>-D, –dired 产生适合 Emacs 的 dired 模式使用的结果</p>\n<p>-f 对输出的文件不进行排序，-aU 选项生效，-lst 选项失效</p>\n<p>-g 类似 -l,但不列出所有者</p>\n<p>-G, –no-group 不列出任何有关组的信息</p>\n<p>-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)</p>\n<p>–si 类似 -h,但文件大小取 1000 的次方而不是 1024</p>\n<p>-H, –dereference-command-line 使用命令列中的符号链接指示的真正目的地</p>\n<p>–indicator-style=方式 指定在每个项目名称后加上指示符号&lt;方式&gt;：none (默认)，classify (-F)，file-type (-p)</p>\n<p>-i, –inode 印出每个文件的 inode 号</p>\n<p>-I, –ignore=样式 不印出任何符合 shell 万用字符&lt;样式&gt;的项目</p>\n<p>-k 即 –block-size=1K,以 k 字节的形式表示文件的大小。</p>\n<p>-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。</p>\n<p>-L, –dereference 当显示符号链接的文件信息时，显示符号链接所指示的对象而并非符号链接本身的信息</p>\n<p>-m 所有项目以逗号分隔，并填满整行行宽</p>\n<p>-o 类似 -l,显示文件的除组信息外的详细信息。   </p>\n<p>-r, –reverse 依相反次序排列</p>\n<p>-R, –recursive 同时列出所有子目录层</p>\n<p>-s, –size 以块大小为单位列出所有文件的大小</p>\n<p>-S 根据文件大小排序</p>\n<p>–sort=WORD 以下是可选用的 WORD 和它们代表的相应选项：</p>\n<p>extension -X status -c</p>\n<p>none -U time -t</p>\n<p>size -S atime -u</p>\n<p>time -t access -u</p>\n<p>version -v use -u</p>\n<p>-t 以文件修改时间排序</p>\n<p>-u 配合 -lt:显示访问时间而且依访问时间排序</p>\n<p>配合 -l:显示访问时间但根据名称排序</p>\n<p>否则：根据访问时间排序</p>\n<p>-U 不进行排序;依文件系统原有的次序列出项目</p>\n<p>-v 根据版本进行排序</p>\n<p>-w, –width=COLS 自行指定屏幕宽度而不使用目前的数值</p>\n<p>-x 逐行列出项目而不是逐栏列出</p>\n<p>-X 根据扩展名排序</p>\n<p>-1 每行只列出一个文件</p>\n<p>–help 显示此帮助信息并离开</p>\n<p>–version 显示版本信息并离开</p>\n<h2 id=\"关于cat\"><a href=\"#关于cat\" class=\"headerlink\" title=\"关于cat\"></a>关于cat</h2><p>cat 命令用于连接文件并打印到标准输出设备上。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用.</p>\n<h3 id=\"命令格式：-1\"><a href=\"#命令格式：-1\" class=\"headerlink\" title=\"命令格式：\"></a>命令格式：</h3><p>cat [选项] [文件]…<br><img src=\"命令行使用/2.jpg\" alt></p>\n<h3 id=\"命令功能：-1\"><a href=\"#命令功能：-1\" class=\"headerlink\" title=\"命令功能：\"></a>命令功能：</h3><p>cat主要有三大功能：</p>\n<p>1.一次显示整个文件:cat filename</p>\n<p>2.从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.</p>\n<p>3.将几个文件合并为一个文件:cat file1 file2 &gt; file</p>\n<h3 id=\"命令参数：\"><a href=\"#命令参数：\" class=\"headerlink\" title=\"命令参数：\"></a>命令参数：</h3><p>-A, –show-all           等价于 -vET</p>\n<p>-b, –number-nonblank    对非空输出行编号</p>\n<p>-e                       等价于 -vE</p>\n<p>-E, –show-ends          在每行结束处显示 $</p>\n<p>-n, –number     对输出的所有行编号,由1开始对所有输出的行数编号</p>\n<p>-s, –squeeze-blank  有连续两行以上的空白行，就代换为一行的空白行 </p>\n<p>-t                       与 -vT 等价</p>\n<p>-T, –show-tabs          将跳格字符显示为 ^I</p>\n<p>-u                       (被忽略)</p>\n<p>-v, –show-nonprinting   使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</p>\n<h2 id=\"关于mv\"><a href=\"#关于mv\" class=\"headerlink\" title=\"关于mv\"></a>关于mv</h2><p>mv命令是move的缩写，可以用来移动文件或者将文件改名（move (rename) files），是Linux系统下常用的命令，经常用来备份文件或者目录.</p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><pre><code>mv [选项] 源文件或目录 目标文件或目录\n</code></pre><p><img src=\"命令行使用/3.jpg\" alt></p>\n<h3 id=\"命令功能：-2\"><a href=\"#命令功能：-2\" class=\"headerlink\" title=\"命令功能：\"></a>命令功能：</h3><p>视mv命令中第二个参数类型的不同（是目标文件还是目标目录），mv命令将文件重命名或将其移至一个新的目录中。当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名），它将所给的源文件或目录重命名为给定的目标文件名。当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。在跨文件系统移动文件时，mv先拷贝，再将原有文件删除，而链至该文件的链接也将丢失。</p>\n<h3 id=\"命令参数：-1\"><a href=\"#命令参数：-1\" class=\"headerlink\" title=\"命令参数：\"></a>命令参数：</h3><p>-b ：若需覆盖文件，则覆盖前先行备份。 </p>\n<p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</p>\n<p>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</p>\n<p>-u ：若目标文件已经存在，且 source 比较新，才会更新(update)</p>\n<pre><code>-t  ： --target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后\n</code></pre><h2 id=\"关于touch\"><a href=\"#关于touch\" class=\"headerlink\" title=\"关于touch\"></a>关于touch</h2><p>linux的touch命令不常用，一般在使用make的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件。</p>\n<h3 id=\"命令格式：-2\"><a href=\"#命令格式：-2\" class=\"headerlink\" title=\"命令格式：\"></a>命令格式：</h3><p>touch [选项]… 文件…<br><img src=\"命令行使用/4.jpg\" alt></p>\n<h3 id=\"命令参数：-2\"><a href=\"#命令参数：-2\" class=\"headerlink\" title=\"命令参数：\"></a>命令参数：</h3><p>-a   或–time=atime或–time=access或–time=use 　只更改存取时间。</p>\n<p>-c   或–no-create 　不建立任何文档。</p>\n<p>-d 　使用指定的日期时间，而非现在的时间。</p>\n<p>-f 　此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题。</p>\n<p>-m   或–time=mtime或–time=modify 　只更改变动时间。</p>\n<p>-r 　把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。</p>\n<p>-t 　使用指定的日期时间，而非现在的时间。</p>\n<h3 id=\"命令功能：-3\"><a href=\"#命令功能：-3\" class=\"headerlink\" title=\"命令功能：\"></a>命令功能：</h3><p>touch命令参数可更改文档或目录的日期时间，包括存取时间和更改时间。 </p>\n<h1 id=\"命令行相关网站\"><a href=\"#命令行相关网站\" class=\"headerlink\" title=\"命令行相关网站\"></a>命令行相关网站</h1><p>如何使用 <a href=\"http://explainshell.com\" target=\"_blank\" rel=\"noopener\">http://explainshell.com</a> 这个网站<br>explanshell这个网站是用来查看命令行释义的工具型网站。</p>\n<h2 id=\"搜索命令\"><a href=\"#搜索命令\" class=\"headerlink\" title=\"搜索命令\"></a>搜索命令</h2><p>在搜索框输入要搜索的命令比如“cd”，然后点框框中的“Explain”进行搜索就能得到它的释义啦。<br><img src=\"命令行使用/5.jpg\" alt></p>\n<h2 id=\"得到结果\"><a href=\"#得到结果\" class=\"headerlink\" title=\"得到结果\"></a>得到结果</h2><p>搜索后得到的结果是这样的。可以看到它用一句话概况说明了该命令行的含义。<br><img src=\"命令行使用/6.jpg\" alt></p>\n<h2 id=\"点开\"><a href=\"#点开\" class=\"headerlink\" title=\"点开\"></a>点开</h2><p>点开它能得到更详细的释义和用法<br><img src=\"命令行使用/7.jpg\" alt></p>\n","categories":[],"tags":["ls","cat","mv","touch"]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]}]